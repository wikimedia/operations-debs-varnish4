Description: Add error handling for STV_NewObject() in vrb_pull

VTC test case forward-ported from 49ad1b2119eb984280b26551d702cf122fd9eb24
(with modifications, $vmod_std does not exist in 5.x), code change back-ported
from 6045eaaa6a2f0a51f667d4c2cf23cd7fb43abe9f.

commit 6045eaaa6a2f0a51f667d4c2cf23cd7fb43abe9f
Author: Dag Haavi Finstad <daghf@varnish-software.com>
Date:   Wed Nov 14 13:39:46 2018 +0100

    Add error handling for STV_NewObject() in vrb_pull
    
    Fixes: #2831

diff --git a/bin/varnishd/cache/cache_req_body.c b/bin/varnishd/cache/cache_req_body.c
index 86d1dd4bf..488815d8a 100644
--- a/bin/varnishd/cache/cache_req_body.c
+++ b/bin/varnishd/cache/cache_req_body.c
@@ -73,7 +73,14 @@ vrb_pull(struct req *req, ssize_t maxsize, objiterate_f *func, void *priv)
 
 	req->storage = NULL;
 
-	XXXAN(STV_NewObject(req->wrk, req->body_oc, stv, 8));
+	if (STV_NewObject(req->wrk, req->body_oc, stv, 8) == 0) {
+		req->req_body_status = REQ_BODY_FAIL;
+		HSH_DerefBoc(req->wrk, req->body_oc);
+		AZ(HSH_DerefObjCore(req->wrk, &req->body_oc, 0));
+		(void)VFP_Error(vfc, "Object allocation failed:"
+		    " Ran out of space in %s", stv->vclname);
+		return (-1);
+	}
 
 	vfc->oc = req->body_oc;
 
diff --git a/bin/varnishtest/tests/r02831.vtc b/bin/varnishtest/tests/r02831.vtc
new file mode 100644
index 000000000..0a7e85239
--- /dev/null
+++ b/bin/varnishtest/tests/r02831.vtc
@@ -0,0 +1,56 @@
+varnishtest "#2831: Out of storage in cache_req_body"
+
+server s1 {
+	rxreq
+	expect req.url == "/obj1"
+	txresp -bodylen 1048400
+} -start
+
+varnish v1 \
+	-arg "-p nuke_limit=0" \
+	-arg "-sTransient=malloc,1m" \
+	-vcl+backend {
+	import std;
+	sub vcl_recv {
+		if (req.method == "POST") {
+			std.cache_req_body(1KB);
+		}
+	}
+	sub vcl_backend_response {
+		set beresp.do_stream = false;
+		set beresp.storage_hint = "Transient";
+		# Unset Date header to not change the object sizes
+		unset beresp.http.Date;
+	}
+} -start
+
+varnish v1 -cliok "param.set debug +syncvsl"
+
+delay .1
+
+client c1 {
+	# Fill transient
+	txreq -url "/obj1"
+	rxresp
+	expect resp.status == 200
+} -run
+
+delay .1
+
+varnish v1 -expect SMA.Transient.g_bytes > 1048400
+varnish v1 -expect SMA.Transient.g_space < 100
+
+client c1 {
+	# No space for caching this req.body
+	txreq -req "POST" -body "foobar"
+	delay 1
+} -run
+
+#varnish v1 -expect SMA.Transient.c_fail == 1
+
+client c1 {
+	# Check that Varnish is still alive
+	txreq -url "/obj1"
+	rxresp
+	expect resp.status == 200
+} -run
