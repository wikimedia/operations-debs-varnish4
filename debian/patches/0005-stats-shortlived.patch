Origin: WMF
Description: Introduce a new counter for shortlived objects creation,
cache_shortlived, and another one for uncacheable responses,
cache_uncacheable. They should provide insights when it comes to
monitoring transient storage usage.
--- a/bin/varnishd/cache/cache_fetch.c
+++ b/bin/varnishd/cache/cache_fetch.c
@@ -57,8 +57,14 @@ vbf_allocobj(struct busyobj *bo, unsigne
 
 	lifetime = oc->ttl + oc->grace + oc->keep;
 
-	if (bo->uncacheable || lifetime < cache_param->shortlived)
+	if (bo->uncacheable) {
+		bo->wrk->stats->cache_uncacheable++;
 		stv = stv_transient;
+	}
+	else if (lifetime < cache_param->shortlived) {
+		bo->wrk->stats->cache_shortlived++;
+		stv = stv_transient;
+	}
 	else
 		stv = bo->storage;
 
--- a/bin/varnishd/VSC_main.vsc
+++ b/bin/varnishd/VSC_main.vsc
@@ -143,6 +143,20 @@
 	Count of misses. A cache miss indicates the object was fetched from
 	the backend before delivering it to the client.
 
+.. varnish_vsc:: cache_shortlived
+	:group: wrk
+	:oneliner: Shortlived objects
+
+	Count of shortlived objects. Objects created with (ttl+grace+keep)
+	shorter than the 'shortlived' parameter are always put in
+	transient storage.
+
+.. varnish_vsc:: cache_uncacheable
+	:group: wrk
+	:oneliner: Uncacheable objects
+
+	Count of uncacheable objects.
+
 .. varnish_vsc:: backend_conn
 	:oneliner:	Backend conn. success
 
