varnishtest "VCL compiler coverage test: vcc_xref.c"

varnish v1 -errvcl {Variable 'obj.ttl' is read only.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv { set obj.ttl = 1 w; }
}

varnish v1 -errvcl {Variable 'obj.ttl' is read only.} {
	backend b { .host = "127.0.0.1"; }

	sub foo { set obj.ttl = 1 w; }
	sub vcl_recv { call foo ; }
}

varnish v1 -errvcl "Expected an action, 'if', '{' or '}'" {
	backend b { .host = "127.0.0.1"; }

	sub vcl_recv { discard; }
}

varnish v1 -errvcl "Expected an action, 'if', '{' or '}'" {
	backend b { .host = "127.0.0.1"; }

	sub foo { discard; }
	sub vcl_recv { call foo; }
}

varnish v1 -errvcl "Function recurses on" {
	backend b { .host = "127.0.0.1"; }

	sub foo { call foo; }
	sub vcl_recv { call foo; }
}

varnish v1 -errvcl "Function recurses on" {
	backend b { .host = "127.0.0.1"; }

	sub bar { call foo; }
	sub foo { call bar; }
	sub vcl_recv { call foo; }
}


varnish v1 -errvcl {Unused acl foo, defined:} {
	backend b { .host = "127.0.0.1"; }

	acl foo { "localhost"; }

}

varnish v1 -errvcl {Unused sub foo, defined:} {
	backend b { .host = "127.0.0.1"; }

	sub foo {
	}
}
varnish v1 -errvcl {Invalid return "deliver"} {
	backend b { .host = "127.0.0.1"; }

	sub vcl_recv {
		call foo;
	}

	sub foo {
		return (deliver);
	}
}

varnish v1 -errvcl {directors are now in directors VMOD} {
	backend b { .host = "127.0.0.1"; }

	director d1 random {
		.backend b;
	}

	sub vcl_recv {
		set req.backend = d1;
	}
}
