.\" Man page generated from reStructuredText.
.
.TH VMOD_BLOB 3 "" "" ""
.SH NAME
vmod_blob \- Utilities for the VCL blob type, encoding and decoding
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" 
.
.\" NB:  This file is machine generated, DO NOT EDIT!
.
.\" 
.
.\" Edit vmod.vcc and run make instead
.
.\" 
.
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import blob [from "path"] ;

BLOB decode(ENUM decoding, INT length, STRING encoded)

STRING encode(ENUM encoding, ENUM case, BLOB blob)

STRING transcode(ENUM decoding, ENUM encoding, ENUM case, INT length, STRING encoded)

BOOL same(BLOB, BLOB)

BOOL equal(BLOB, BLOB)

INT length(BLOB)

BLOB sub(BLOB, BYTES length, BYTES offset)

new xblob = blob.blob(ENUM decoding, STRING encoded)

   BLOB xblob.get()

   STRING xblob.encode(ENUM encoding, ENUM case)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
This VMOD provides utility functions and an object for the VCL data
type BLOB, which may contain arbitrary data of any length.
.sp
Examples:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sub vcl_init {
    # Create blob objects from encodings such as base64 or hex.
    new myblob   = blob.blob(BASE64, "Zm9vYmFy");
    new yourblob = blob.blob(encoded="666F6F", decoding=HEX);
}

sub vcl_deliver {
    # The .get() method retrieves the BLOB from an object.
    set resp.http.MyBlob\-As\-Hex
        = blob.encode(blob=myblob.get(), encoding=HEX);

    # The .encode() method efficiently retrieves an encoding.
    set resp.http.YourBlob\-As\-Base64 = yourblob.encode(BASE64);

    # decode() and encode() functions convert blobs to text and
    # vice versa at runtime.
    set resp.http.Base64\-Encoded
        = blob.encode(BASE64,
                      blob=blob.decode(HEX,
                                       encoded=req.http.Hex\-Encoded));
}

sub vcl_recv {
    # transcode() converts from one encoding to another.
    # case=UPPER specifies upper\-case hex digits A\-F.
    set req.http.Hex\-Encoded
        = blob.transcode(decoding=BASE64, encoding=HEX,
                         case=UPPER, encoded="YmF6");

    # transcode() from URL to IDENTITY effects a URL decode.
    set req.url = blob.transcode(encoded=req.url, decoding=URL);

    # transcode() from IDENTITY to URL effects a URL encode.
    set req.http.url_urlcoded
        = blob.transcode(encoded=req.url, encoding=URL);
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ENCODING SCHEMES
.sp
Binary\-to\-text encoding schemes are specified by ENUMs in the VMOD\(aqs
constructor, methods and functions. Decodings convert a (possibly
concatenated) string into a blob, while encodings convert a blob into
a string.
.sp
ENUM values for an encoding scheme can be one of:
.INDENT 0.0
.IP \(bu 2
\fBIDENTITY\fP
.IP \(bu 2
\fBBASE64\fP
.IP \(bu 2
\fBBASE64URL\fP
.IP \(bu 2
\fBBASE64URLNOPAD\fP
.IP \(bu 2
\fBHEX\fP
.IP \(bu 2
\fBURL\fP
.UNINDENT
.sp
Empty strings are decoded into a "null blob" (of length 0),
and conversely a null blob is encoded as the empty string.
.sp
For encodings with \fBHEX\fP or \fBURL\fP, you may also specify a \fBcase\fP
ENUM with one of the values \fBLOWER\fP, \fBUPPER\fP or \fBDEFAULT\fP to
produce a string with lower\- or uppercase hex digits (in \fB[a\-f]\fP or
\fB[A\-F]\fP). The default value for \fBcase\fP is \fBDEFAULT\fP, which for
\fBHEX\fP and \fBURL\fP means the same as \fBLOWER\fP\&.
.sp
The \fBcase\fP ENUM is not relevant for decodings; \fBHEX\fP or \fBURL\fP
strings to be decoded as BLOBs may have hex digits in either case, or
in mixed case.
.sp
The \fBcase\fP ENUM MUST be set to \fBDEFAULT\fP for the other encodings
(BASE64* and IDENTITY).  You cannot, for example, produce an uppercase
string by using the IDENTITY scheme with \fBcase=UPPER\fP\&. To change the
case of a string, use the \fBtoupper\fP or \fBtolower\fP functions from
\fIvmod_std(3)\fP\&.
.SS IDENTITY
.sp
The simplest encoding converts between the BLOB and STRING data types,
leaving the contents byte\-identical.
.sp
Note that a BLOB may contain a null byte at any position before its
end; if such a BLOB is decoded with IDENTITY, the resulting STRING
will have a null byte at that position. Since VCL strings, like C
strings, are represented with a terminating null byte, the string will
be truncated, appearing to contain less data than the original
blob. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Decode from the hex encoding for "foo\e0bar".
# The header will be seen as "foo".
set resp.http.Trunced\-Foo1
    = blob.encode(IDENTITY, blob=blob.decode(HEX,
                                             encoded="666f6f00626172"));
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
IDENTITY is the default encoding and decoding. So the above can also
be written as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Decode from the hex encoding for "foo\e0bar".
# The header will be seen as "foo".
set resp.http.Trunced\-Foo2
  = blob.encode(blob=blob.decode(HEX, encoded="666f6f00626172"));
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBcase\fP ENUM MUST be set to \fBDEFAULT\fP for \fBIDENTITY\fP encodings.
.SS BASE64*
.sp
The base64 encoding schemes use 4 characters to encode 3 bytes. There
are no newlines or maximal line lengths \-\- whitespace is not
permitted.
.sp
The \fBBASE64\fP encoding uses the alphanumeric characters, \fB+\fP and
\fB/\fP; and encoded strings are padded with the \fB=\fP character so that
their length is always a multiple of four.
.sp
The \fBBASE64URL\fP encoding also uses the alphanumeric characters, but
\fB\-\fP and \fB_\fP instead of \fB+\fP and \fB/\fP, so that an encoded string
can be used safely in a URL. This scheme also uses the padding
character \fB=\fP\&.
.sp
The \fBBASE64URLNOPAD\fP encoding uses the same alphabet as
\fBBASE6URL\fP, but leaves out the padding. Thus the length of an
encoding with this scheme is not necessarily a multiple of four.
.sp
The \fBcase\fP ENUM MUST be set to \fBDEFAULT\fP for for all of the
\fBBASE64*\fP encodings.
.SS HEX
.sp
The \fBHEX\fP encoding scheme converts hex strings into blobs and vice
versa. For encodings, you may use the \fBcase\fP ENUM to specify upper\-
or lowercase hex digits \fBA\fP through \fBf\fP (default \fBDEFAULT\fP,
which means the same as \fBLOWER\fP).  A prefix such as \fB0x\fP is not
used for an encoding and is illegal for a decoding.
.sp
If a hex string to be decoded has an odd number of digits, it is
decoded as if a \fB0\fP is prepended to it; that is, the first digit is
interpreted as representing the least significant nibble of the first
byte. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# The concatenated string is "abcdef0", and is decoded as "0abcdef0".
set resp.http.First = "abc";
set resp.http.Second = "def0";
set resp.http.Hex\-Decoded
    = blob.encode(HEX, blob=blob.decode(HEX,
                       encoded=resp.http.First + resp.http.Second));
.ft P
.fi
.UNINDENT
.UNINDENT
.SS URL
.sp
The \fBURL\fP decoding replaces any \fB%<2\-hex\-digits>\fP substrings with
the binary value of the hexadecimal number after the % sign.
.sp
The \fBURL\fP encoding implements "percent encoding" as per RFC3986. The
\fBcase\fP ENUM determines the case of the hex digits, but does not
affect alphabetic characters that are not percent\-encoded.
.SS BLOB decode(ENUM decoding, INT length, STRING encoded)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
BLOB decode(
   ENUM {IDENTITY, BASE64, BASE64URL, BASE64URLNOPAD, HEX, URL} decoding=IDENTITY,
   INT length=0,
   STRING encoded
)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Returns the BLOB derived from the string \fBencoded\fP according to the
scheme specified by \fBdecoding\fP\&.
.sp
If \fBlength\fP > 0, only decode the first \fBlength\fP characters of the
encoded string. If \fBlength\fP <= 0 or greater than the length of the
string, then decode the entire string. The default value of \fBlength\fP
is 0.
.sp
\fBdecoding\fP defaults to IDENTITY.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
blob.decode(BASE64, encoded="Zm9vYmFyYmF6");

# same with named parameters
blob.decode(encoded="Zm9vYmFyYmF6", decoding=BASE64);

# convert string to blob
blob.decode(encoded="foo");
.ft P
.fi
.UNINDENT
.UNINDENT
.SS STRING encode(ENUM encoding, ENUM case, BLOB blob)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
STRING encode(
   ENUM {IDENTITY, BASE64, BASE64URL, BASE64URLNOPAD, HEX, URL} encoding=IDENTITY,
   ENUM {LOWER, UPPER, DEFAULT} case=DEFAULT,
   BLOB blob
)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Returns a string representation of the BLOB \fBblob\fP as specified by
\fBencoding\fP\&. \fBcase\fP determines the case of hex digits for the
\fBHEX\fP and \fBURL\fP encodings, and is ignored for the other encodings.
.sp
\fBencoding\fP defaults to IDENTITY, and \fBcase\fP defaults to DEFAULT.
DEFAULT is interpreted as LOWER for the HEX and URL encodings, and is
the required value for the other encodings.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set resp.http.encode1
    = blob.encode(HEX,
                  blob=blob.decode(BASE64, encoded="Zm9vYmFyYmF6"));

# same with named parameters
set resp.http.encode2
    = blob.encode(blob=blob.decode(encoded="Zm9vYmFyYmF6",
                                           decoding=BASE64),
                      encoding=HEX);

# convert blob to string
set resp.http.encode3
    = blob.encode(blob=blob.decode(encoded="foo"));
.ft P
.fi
.UNINDENT
.UNINDENT
.SS transcode(...)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
STRING transcode(
   ENUM {IDENTITY, BASE64, BASE64URL, BASE64URLNOPAD, HEX, URL} decoding=IDENTITY,
   ENUM {IDENTITY, BASE64, BASE64URL, BASE64URLNOPAD, HEX, URL} encoding=IDENTITY,
   ENUM {LOWER, UPPER, DEFAULT} case=DEFAULT,
   INT length=0,
   STRING encoded
)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Translates from one encoding to another, by first decoding the string
\fBencoded\fP according to the scheme \fBdecoding\fP, and then returning
the encoding of the resulting blob according to the scheme
\fBencoding\fP\&. \fBcase\fP determines the case of hex digits for the
\fBHEX\fP and \fBURL\fP encodings, and is ignored for other encodings.
.sp
As with \fBdecode()\fP: If \fBlength\fP > 0, only decode the first
\fBlength\fP characters of the encoded string, otherwise decode the
entire string. The default value of \fBlength\fP is 0.
.sp
\fBdecoding\fP and \fBencoding\fP default to IDENTITY, and \fBcase\fP
defaults to DEFAULT. DEFAULT is interpreted as LOWER for the HEX and
URL encodings, and is the required value for the other encodings.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set resp.http.Hex2Base64\-1
     = blob.transcode(HEX, BASE64, encoded="666f6f");

 # same with named parameters
 set resp.http.Hex2Base64\-2
    = blob.transcode(encoded="666f6f",
                          encoding=BASE64, decoding=HEX);

 # URL decode \-\- recall that IDENTITY is the default encoding.
 set resp.http.urldecoded
    = blob.transcode(encoded="foo%20bar", decoding=URL);

 # URL encode
 set resp.http.urlencoded
     = blob.transcode(encoded="foo bar", encoding=URL);
.ft P
.fi
.UNINDENT
.UNINDENT
.SS BOOL same(BLOB, BLOB)
.sp
Returns true if and only if the two BLOB arguments are the same
object, i.e. they specify exactly the same region of memory, or both
are empty.
.sp
If the BLOBs are both empty (length is 0 and/or the internal pointer
is NULL), then \fBsame()\fP returns \fBtrue\fP\&. If any non\-empty BLOB
is compared to an empty BLOB, then \fBsame()\fP returns \fBfalse\fP\&.
.SS BOOL equal(BLOB, BLOB)
.sp
Returns true if and only if the two BLOB arguments have equal contents
(possibly in different memory regions).
.sp
As with \fBsame()\fP: If the BLOBs are both empty, then \fBequal()\fP
returns \fBtrue\fP\&. If any non\-empty BLOB is compared to an empty BLOB,
then \fBequal()\fP returns \fBfalse\fP\&.
.SS INT length(BLOB)
.sp
Returns the length of the BLOB.
.SS BLOB sub(BLOB, BYTES length, BYTES offset=0)
.sp
Returns a new BLOB formed from \fBlength\fP bytes of the BLOB argument
starting at \fBoffset\fP bytes from the start of its memory region. The
default value of \fBoffset\fP is 0B.
.sp
\fBsub()\fP fails and returns NULL if the BLOB argument is empty, or if
\fBoffset + length\fP requires more bytes than are available in the
BLOB.
.SS new xblob = blob.blob(ENUM decoding, STRING encoded)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
new xblob = blob.blob(
   ENUM {IDENTITY, BASE64, BASE64URL, BASE64URLNOPAD, HEX, URL} decoding=IDENTITY,
   STRING encoded
)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Creates an object that contains the BLOB derived from the string
\fBencoded\fP according to the scheme \fBdecoding\fP\&.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
new theblob1 = blob.blob(BASE64, encoded="YmxvYg==");

# same with named arguments
new theblob2 = blob.blob(encoded="YmxvYg==", decoding=BASE64);

# string as a blob
new stringblob = blob.blob(encoded="bazz");
.ft P
.fi
.UNINDENT
.UNINDENT
.SS BLOB xblob.get()
.sp
Returns the BLOB created by the constructor.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set resp.http.The\-Blob1 =
    blob.encode(blob=theblob1.get());

set resp.http.The\-Blob2 =
    blob.encode(blob=theblob2.get());

set resp.http.The\-Stringblob =
    blob.encode(blob=stringblob.get());
.ft P
.fi
.UNINDENT
.UNINDENT
.SS STRING xblob.encode(ENUM encoding, ENUM case)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
STRING xblob.encode(
      ENUM {IDENTITY, BASE64, BASE64URL, BASE64URLNOPAD, HEX, URL} encoding=IDENTITY,
      ENUM {LOWER, UPPER, DEFAULT} case=DEFAULT
)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Returns an encoding of BLOB created by the constructor, according to
the scheme \fBencoding\fP\&. \fBcase\fP determines the case of hex digits
for the \fBHEX\fP and \fBURL\fP encodings, and MUST be set to \fBDEFAULT\fP
for the other encodings.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# blob as text
set resp.http.The\-Blob = theblob1.encode();

# blob as base64
set resp.http.The\-Blob\-b64 = theblob1.encode(BASE64);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For any \fBblob\fP object, encoding \fBENC\fP and case \fBCASE\fP, encodings
via the \fB\&.encode()\fP method and the \fBencode()\fP function are equal:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Always true:
blob.encode(ENC, CASE, blob.get()) == blob.encode(ENC, CASE)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
But the object method is more efficient \-\- the encoding is computed
once and cached (with allocation in heap memory), and the cached
encoding is retrieved on every subsequent call. The \fBencode()\fP
function computes the encoding on every call, allocating space for the
string in Varnish workspaces.
.sp
So if the data in a BLOB are fixed at VCL initialization time, so that
its encodings will always be the same, it is better to create a
\fBblob\fP object. The VMOD\(aqs functions should be used for data that are
not known until runtime.
.SH ERRORS
.sp
The encoders, decoders and \fBsub()\fP may fail if there is insufficient
space to create the new blob or string. Decoders may also fail if the
encoded string is an illegal format for the decoding scheme. Encoders
will fail for the \fBIDENTITY\fP and \fBBASE64*\fP encoding schemes if the
\fBcase\fP ENUM is not set to \fBDEFAULT\fP\&.
.sp
If any of the VMOD\(aqs methods, functions or constructor fail, then VCL
failure is invoked, just as if \fBreturn(fail)\fP had been called in the
VCL source. This means that:
.INDENT 0.0
.IP \(bu 2
If the \fBblob\fP object constructor fails, or if any methods or
functions fail during \fBvcl_init\fP, then the VCL program will fail
to load, and the VCC compiler will emit an error message.
.IP \(bu 2
If a method or function fails in any other VCL subroutine besides
\fBvcl_synth\fP, then control is directed to \fBvcl_synth\fP\&. The
response status is set to 503 with the reason string \fB"VCL
failed"\fP, and an error message will be written to the Varnish log
using the tag \fBVCL_Error\fP\&.
.IP \(bu 2
If the failure occurs during \fBvcl_synth\fP, then \fBvcl_synth\fP is
aborted. The response line \fB"503 VCL failed"\fP is returned, and
the \fBVCL_Error\fP message is written to the log.
.UNINDENT
.SH LIMITATIONS
.sp
The VMOD allocates memory in various ways for new blobs and
strings. The \fBblob\fP object and its methods allocate memory from the
heap, and hence they are only limited by available virtual memory.
.sp
The \fBencode()\fP, \fBdecode()\fP and \fBtranscode()\fP functions allocate
Varnish workspace, as does \fBsub()\fP for the newly created BLOB.  If
these functions are failing, as indicated by "out of space" messages
in the Varnish log (with the \fBVCL_Error\fP tag), then you will need to
increase the varnishd parameters \fBworkspace_client\fP and/or
\fBworkspace_backend\fP\&.
.sp
The \fBtranscode()\fP function also allocates space on the stack for a
temporary BLOB. If this function causes stack overflow, you may need
to increase the varnishd parameter \fBthread_pool_stack\fP\&.
.SH SEE ALSO
.INDENT 0.0
.IP \(bu 2
\fIvarnishd(1)\fP
.IP \(bu 2
\fIvcl(7)\fP
.IP \(bu 2
\fIvmod_std(3)\fP
.UNINDENT
.SH COPYRIGHT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
This document is licensed under the same conditions as Varnish itself.
See LICENSE for details.

Authors: Nils Goroll <nils.goroll@uplex.de>
         Geoffrey Simmons <geoffrey.simmons@uplex.de>
.ft P
.fi
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
