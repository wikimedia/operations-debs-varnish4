.\" Man page generated from reStructeredText.
.
.TH VMOD_DIRECTORS 3 "" "" ""
.SH NAME
vmod_directors \- Backend traffic directors
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
import directors [from "path"] ;
.SH DESCRIPTION
.sp
Vmod_directors enables load balancing in Varnish. The module serves
as an example on how one could extend the load balancing capabilities
of Varnish.
.sp
To enable load balancing you must import this vmod (directors) in your
VCL::
.sp
.nf
.ft C
import directors;
.ft P
.fi
.sp
Then you define your backends. Once you have the backends declared you
can add them to a director. This happens in executed VCL code. If you
want to emulate the previous behavior of Varnish 3.0 you can just
initialize the directors in vcl_init, like this::
.sp
.nf
.ft C
sub vcl_init {
    new bar = directors.round_robin();
    bar.add_backend(server1);
    bar.add_backend(server2);
}
.ft P
.fi
.sp
As you can see there is nothing keeping you from manipulating the
directors elsewhere in VCL. So, you could have VCL code that would
add more backends to a director when a certain URL is called.
.sp
Note that directors can use other directors as backends.
.SH CONTENTS
.INDENT 0.0
.IP \(bu 2
Object fallback
.IP \(bu 2
VOID fallback.add_backend(BACKEND)
.IP \(bu 2
BACKEND fallback.backend()
.IP \(bu 2
Object hash
.IP \(bu 2
VOID hash.add_backend(BACKEND, REAL)
.IP \(bu 2
BACKEND hash.backend(STRING_LIST)
.IP \(bu 2
Object random
.IP \(bu 2
VOID random.add_backend(BACKEND, REAL)
.IP \(bu 2
BACKEND random.backend()
.IP \(bu 2
Object round_robin
.IP \(bu 2
VOID round_robin.add_backend(BACKEND)
.IP \(bu 2
BACKEND round_robin.backend()
.UNINDENT
.SH OBJECT ROUND_ROBIN
.INDENT 0.0
.TP
.B Description
Create a round robin director. This director will pick backends
in a round robin fashion.
.TP
.B Example
new bar = directors.round_robin();
.UNINDENT
.SS VOID round_robin.add_backend(BACKEND)
.INDENT 0.0
.TP
.B Prototype
VOID round_robin.add_backend(BACKEND)
.TP
.B Description
Adds a backend to the director.
.TP
.B Example
rrdir.add_backend(backend1);
.UNINDENT
.SS BACKEND round_robin.backend()
.INDENT 0.0
.TP
.B Prototype
BACKEND round_robin.backend()
.TP
.B Description
Picks a backend from the director.
.TP
.B Example
set req.backend_hint = rrdir.backend();
.UNINDENT
.SH OBJECT FALLBACK
.INDENT 0.0
.TP
.B Description
Creates a fallback director.
.UNINDENT
.sp
#       XXX: Add description of fallback director.
.INDENT 0.0
.TP
.B Example
new foo = directors.fallback();
.UNINDENT
.SS VOID fallback.add_backend(BACKEND)
.INDENT 0.0
.TP
.B Prototype
VOID fallback.add_backend(BACKEND)
.TP
.B Description
Adds a backend to the director.
.TP
.B Example
bar.add_backend(backend1);
.UNINDENT
.SS BACKEND fallback.backend()
.INDENT 0.0
.TP
.B Prototype
BACKEND fallback.backend()
.TP
.B Description
Picks a backend from the director.
.TP
.B Example
set req.backend_hint = rrdir.backend();
.UNINDENT
.SH OBJECT RANDOM
.INDENT 0.0
.TP
.B Description
Adds a random director. This director chooses backend based on
a random number. As you add backends to the director each
backends gets a weight, which is used to when requests are
being distributed. So, a backend with a weight of 1 would get
more or less 1% of the traffic of a backend in the same
director with a weight of 100.
.TP
.B Example
new rand_dir = directors.random();
.UNINDENT
.SS VOID random.add_backend(BACKEND, REAL)
.INDENT 0.0
.TP
.B Prototype
VOID random.add_backend(BACKEND, REAL)
.TP
.B Description
Adds a backend to the director with weight.
.TP
.B Example
bar.add_backend(backend1, 3.14);
.UNINDENT
.SS BACKEND random.backend()
.INDENT 0.0
.TP
.B Prototype
BACKEND random.backend()
.TP
.B Description
Picks a backend from the director.
.TP
.B Example
set req.backend_hint = rrdir.backend();
.UNINDENT
.SH OBJECT HASH
.INDENT 0.0
.TP
.B Description
Creates a hash director. The hash director chooses the backend
based on hashing an arbitrary string. If you provide it with a
session cookie, you\(aqll have the client connecting to the same
backend every time.
.TP
.B Example
new hdir = directors.hash();
.UNINDENT
.SS VOID hash.add_backend(BACKEND, REAL)
.INDENT 0.0
.TP
.B Prototype
VOID hash.add_backend(BACKEND, REAL)
.TP
.B Description
Adds a backend to the director with a certain weight.
.sp
Weight is used as in the round_robin director. Recommended value is
1.0 unless you have special needs.
.TP
.B Example
hdir.add_backend(backend1, 1.0);
.UNINDENT
.SS BACKEND hash.backend(STRING_LIST)
.INDENT 0.0
.TP
.B Prototype
BACKEND hash.backend(STRING_LIST)
.TP
.B Description
Picks a backend from the director. Use the string or list of
strings provided to pick the backend.
.TP
.B Example
# pick a backend based on the cookie header from the client
set req.backend_hint = hdir.backend(req.http.cookie);
.UNINDENT
.\" Generated by docutils manpage writer.
.\" 
.
